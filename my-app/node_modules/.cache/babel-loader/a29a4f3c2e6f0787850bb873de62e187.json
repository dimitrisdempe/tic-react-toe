{"ast":null,"code":"var _jsxFileName = \"/home/infinity/Desktop/tic-react-toe/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boardSize: 3\n    };\n  }\n\n  renderSquare(row, column) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[row][column],\n      onClick: () => this.props.onClick(row, column)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }, this);\n  }\n\n  renderRow(rowNumber) {\n    var items = [];\n\n    for (var column = 0; column < this.state.boardSize; column++) {\n      items.push(this.renderSquare(rowNumber, column));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    var rows = [];\n\n    for (var i = 0; i < this.state.boardSize; i++) {\n      rows.push(this.renderRow(i));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boardSize: 3,\n      history: [{\n        squares: Array(3).fill(Array(3).fill(null))\n      }],\n      xIsNext: true\n    };\n  }\n\n  handleClick(row, column) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    console.log(squares);\n    console.log(\"I am clicking on square \" + row + \", \" + column);\n\n    if (calculateWinner(squares) || squares[row][column]) {\n      return;\n    }\n\n    squares[row][column] = this.state.xIsNext ? 'X' : 'O';\n    console.log(squares);\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(Math.floor(i / 3), i % 3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 106,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  return null;\n  /*\n  const consecutive = 3;\n  var boardSize = squares.length;\n  for( var row = 0; row < boardSize; row++ ) {\n      for( var column = 0; column < boardSize - consecutive + 1; column++ ) {\n          var win = false;\n          for( var offset = 0; offset < consecutive; offset++ ) {\n              if(\n          }\n      }\n  }\n  for (let i = 0; i<lines.length;i++){\n    const [a,b,c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n      return squares[a];\n    }\n     }\n  return null;*/\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/home/infinity/Desktop/tic-react-toe/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","constructor","state","boardSize","renderSquare","row","column","squares","renderRow","rowNumber","items","push","render","rows","i","Game","history","Array","fill","xIsNext","handleClick","current","length","slice","console","log","calculateWinner","setState","concat","winner","status","Math","floor","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,sBACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACC,OAA1C;AAAA,cACGD,KAAK,CAACE;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKH;;KANQH,M;;AAST,MAAMI,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAAEL,KAAF,EAAU;AACjB,UAAOA,KAAP;AACA,SAAKM,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AADF,KAAb;AAGH;;AACDC,EAAAA,YAAY,CAAEC,GAAF,EAAOC,MAAP,EAAgB;AACxB,wBAAQ,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKV,KAAL,CAAWW,OAAX,CAAmBF,GAAnB,EAAwBC,MAAxB,CAAf;AAAgD,MAAA,OAAO,EAAI,MAAM,KAAKV,KAAL,CAAWC,OAAX,CAAmBQ,GAAnB,EAAuBC,MAAvB;AAAjE;AAAA;AAAA;AAAA;AAAA,YAAR;AACH;;AAEDE,EAAAA,SAAS,CAAEC,SAAF,EAAc;AACnB,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIJ,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAG,KAAKJ,KAAL,CAAWC,SAAzC,EAAoDG,MAAM,EAA1D,EAA+D;AAC3DI,MAAAA,KAAK,CAACC,IAAN,CAAY,KAAKP,YAAL,CAAmBK,SAAnB,EAA8BH,MAA9B,CAAZ;AACH;;AACD,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACKI;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAEDE,EAAAA,MAAM,GAAG;AACL,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKZ,KAAL,CAAWC,SAA/B,EAA0CW,CAAC,EAA3C,EAAgD;AAC5CD,MAAAA,IAAI,CAACF,IAAL,CAAW,KAAKH,SAAL,CAAgBM,CAAhB,CAAX;AACH;;AACD,wBACI;AAAA,gBAAMD;AAAN;AAAA;AAAA;AAAA;AAAA,YADJ;AAGL;;AA/BiC;;AAkCpC,MAAME,IAAN,SAAmBtB,KAAK,CAACO,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACL,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKM,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,CADF;AAETa,MAAAA,OAAO,EAAE,CAAC;AACNT,QAAAA,OAAO,EAAEU,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAcD,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAd;AADH,OAAD,CAFA;AAKTC,MAAAA,OAAO,EAAE;AALA,KAAb;AAOD;;AACDC,EAAAA,WAAW,CAAEf,GAAF,EAAOC,MAAP,EAAe;AACxB,UAAMU,OAAO,GAAG,KAAKd,KAAL,CAAWc,OAA3B;AACA,UAAMK,OAAO,GAAGL,OAAO,CAAEA,OAAO,CAACM,MAAR,GAAiB,CAAnB,CAAvB;AACA,UAAMf,OAAO,GAAGc,OAAO,CAACd,OAAR,CAAgBgB,KAAhB,EAAhB;AACEC,IAAAA,OAAO,CAACC,GAAR,CAAalB,OAAb;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BpB,GAA7B,GAAmC,IAAnC,GAA0CC,MAAtD;;AACF,QAAKoB,eAAe,CAACnB,OAAD,CAAf,IAA4BA,OAAO,CAAEF,GAAF,CAAP,CAAgBC,MAAhB,CAAjC,EAA2D;AACvD;AACD;;AACDC,IAAAA,OAAO,CAAEF,GAAF,CAAP,CAAgBC,MAAhB,IAA2B,KAAKJ,KAAL,CAAWiB,OAAX,GAAqB,GAArB,GAA2B,GAAtD;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAalB,OAAb;AACA,SAAKoB,QAAL,CAAc;AACVX,MAAAA,OAAO,EAAEA,OAAO,CAACY,MAAR,CAAe,CAAC;AAACrB,QAAAA,OAAO,EAAEA;AAAV,OAAD,CAAf,CADC;AAEVY,MAAAA,OAAO,EAAE,CAAC,KAAKjB,KAAL,CAAWiB;AAFX,KAAd;AAID;;AAEHP,EAAAA,MAAM,GAAG;AACP,UAAMI,OAAO,GAAG,KAAKd,KAAL,CAAWc,OAA3B;AACA,UAAMK,OAAO,GAAGL,OAAO,CAACA,OAAO,CAACM,MAAR,GAAe,CAAhB,CAAvB;AACA,UAAMO,MAAM,GAAGH,eAAe,CAACL,OAAO,CAACd,OAAT,CAA9B;AACA,QAAIuB,MAAJ;;AACA,QAAID,MAAJ,EAAW;AACTC,MAAAA,MAAM,GAAG,aAAaD,MAAtB;AACD,KAFD,MAEO;AACLC,MAAAA,MAAM,GAAG,mBAAmB,KAAK5B,KAAL,CAAWiB,OAAX,GAAqB,GAArB,GAA2B,GAA9C,CAAT;AACD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACE,QAAC,KAAD;AACA,UAAA,OAAO,EAAIE,OAAO,CAACd,OADnB;AAEA,UAAA,OAAO,EAAGO,CAAD,IAAO,KAAKM,WAAL,CAAkBW,IAAI,CAACC,KAAL,CAAYlB,CAAC,GAAG,CAAhB,CAAlB,EAAuCA,CAAC,GAAG,CAA3C;AAFhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAA,oBAAMgB;AAAN;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AApDgC,C,CAuDnC;;;AAEApC,QAAQ,CAACkB,MAAT,eACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QADF,EAEEqB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF;;AAIA,SAASR,eAAT,CAAyBnB,OAAzB,EAAkC;AAC9B,SAAO,IAAP;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n}\n\n\nclass Board extends React.Component {\n    constructor( props ) {\n        super( props );\n        this.state = {\n            boardSize: 3,\n        }\n    }\n    renderSquare( row, column ) {\n        return (<Square value={this.props.squares[row][column]} onClick = {() => this.props.onClick(row,column)} />);\n    }\n\n    renderRow( rowNumber ) {\n        var items = [];\n        for( var column = 0; column < this.state.boardSize; column++ ) {\n            items.push( this.renderSquare( rowNumber, column ) );\n        }\n        return (\n            <div className='board-row'>\n                {items}\n            </div>\n        );\n    }\n  \n    render() {\n        var rows = [];\n        for( var i = 0; i < this.state.boardSize; i++ ) {\n            rows.push( this.renderRow( i ) );\n        }\n        return (\n            <div>{rows}</div>\n        );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        boardSize: 3,\n        history: [{\n            squares: Array(3).fill(Array(3).fill(null)),\n        }],\n        xIsNext: true,\n    };\n  }\n  handleClick( row, column ){\n    const history = this.state.history;\n    const current = history[ history.length - 1 ];\n    const squares = current.squares.slice();\n      console.log( squares );\n      console.log(\"I am clicking on square \" + row + \", \" + column );\n    if ( calculateWinner(squares) || squares[ row ][ column ] ){\n        return;\n      }\n      squares[ row ][ column ] = this.state.xIsNext ? 'X' : 'O';\n      console.log( squares );\n      this.setState({\n          history: history.concat([{squares: squares,}]),\n          xIsNext: !this.state.xIsNext,\n    });\n    }\n  \n  render() {\n    const history = this.state.history;\n    const current = history[history.length-1];\n    const winner = calculateWinner(current.squares);\n    let status;\n    if (winner){\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n          squares = {current.squares}\n          onClick={(i) => this.handleClick( Math.floor( i / 3 ), i % 3 )}\n           />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\nfunction calculateWinner(squares) {\n    return null;\n    /*\n    const consecutive = 3;\n    var boardSize = squares.length;\n    for( var row = 0; row < boardSize; row++ ) {\n        for( var column = 0; column < boardSize - consecutive + 1; column++ ) {\n            var win = false;\n            for( var offset = 0; offset < consecutive; offset++ ) {\n                if(\n            }\n        }\n    }\n    for (let i = 0; i<lines.length;i++){\n      const [a,b,c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n        return squares[a];\n      }\n  \n    }\n    return null;*/\n}\n"]},"metadata":{},"sourceType":"module"}