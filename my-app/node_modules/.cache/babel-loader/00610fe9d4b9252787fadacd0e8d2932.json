{"ast":null,"code":"var _jsxFileName = \"/home/infinity/Desktop/tic-react-toe/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Square;\n\nfunction getIndex(row, column, rowSize) {\n  return row * rowSize + column;\n}\n\nclass Board extends React.Component {\n  renderSquare(row, column) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[getIndex(row, column, this.props.boardSize)],\n      onClick: () => this.props.onClick(getIndex(row, column, this.props.boardSize))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this);\n  }\n\n  renderRow(rowNumber) {\n    var items = [];\n\n    for (var column = 0; column < this.props.boardSize; column++) {\n      items.push(this.renderSquare(rowNumber, column));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    var rows = [];\n\n    for (var i = 0; i < this.props.boardSize; i++) {\n      rows.push(this.renderRow(i));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boardSize: 3,\n      squares: Array(9).fill(null),\n      xIsNext: true\n    };\n  }\n\n  handleClick(index) {\n    var boardSquares = this.state.squares;\n    if (calculateWinner(boardSquares) || boardSquares[index]) return;\n    boardSquares[index] = this.state.xIsNext ? 'X' : 'O';\n    this.setState(state => ({\n      squares: boardSquares,\n      xIsNext: !state.xIsNext\n    }));\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          boardSize: this.state.boardSize,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 92,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const consecutive = 3;\n  var boardSize = Math.floor(Math.sqrt(squares.length));\n  console.log(boardSize);\n\n  for (var row = 0; row < boardSize; row++) {\n    for (var column = 0; column < boardSize - consecutive + 1; column++) {\n      var win = true;\n      let index = getIndex(row, column, boardSize);\n      if (!squares[index]) continue;\n\n      for (var offset = 0; offset < consecutive; offset++) {\n        let new_index = getIndex(row, column + offset, boardSize);\n\n        if (squares[index] !== squares[new_index]) {\n          win = false;\n          break;\n        }\n      }\n\n      if (win) return squares[index];\n    }\n  }\n\n  for (var column = 0; column < boardSize; column++) {\n    for (var row = 0; row < boardSize - consecutive + 1; row++) {\n      var win = true;\n      let index = getIndex(row, column, boardSize);\n      if (!squares[index]) continue;\n\n      for (var offset = 0; offset < consecutive; offset++) {\n        let new_index = getIndex(row, column + offset, boardSize);\n\n        if (squares[index] !== squares[new_index]) {\n          win = false;\n          break;\n        }\n      }\n\n      if (win) return squares[index];\n    }\n  }\n\n  return null;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/home/infinity/Desktop/tic-react-toe/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","getIndex","row","column","rowSize","Board","Component","renderSquare","squares","boardSize","renderRow","rowNumber","items","push","render","rows","i","Game","constructor","state","Array","fill","xIsNext","handleClick","index","boardSquares","calculateWinner","setState","winner","status","document","getElementById","consecutive","Math","floor","sqrt","length","console","log","win","offset","new_index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n}\n\nfunction getIndex( row, column, rowSize ) {\n    return row * rowSize + column;\n}\n\nclass Board extends React.Component {\n    renderSquare( row, column ) {\n        return (<Square value={this.props.squares[getIndex( row, column, this.props.boardSize )]} onClick = {() => this.props.onClick(getIndex( row, column, this.props.boardSize ))} />);\n    }\n    renderRow( rowNumber ) {\n        var items = [];\n        for( var column = 0; column < this.props.boardSize; column++ ) {\n            items.push( this.renderSquare( rowNumber, column ) );\n        }\n        return (\n            <div className='board-row'>\n                {items}\n            </div>\n        );\n    }\n  \n    render() {\n        var rows = [];\n        for( var i = 0; i < this.props.boardSize; i++ ) {\n            rows.push( this.renderRow( i ) );\n        }\n        return (\n            <div>{rows}</div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        boardSize: 3,\n        squares: Array( 9 ).fill( null ),\n        xIsNext: true,\n    };\n  }\n  handleClick( index ){\n      var boardSquares = this.state.squares;\n      if( calculateWinner( boardSquares ) || boardSquares[ index ] ) return;\n      boardSquares[ index ] = this.state.xIsNext ? 'X' : 'O';\n      this.setState(state => ({\n          squares: boardSquares,\n          xIsNext: !state.xIsNext,\n        }));\n    }\n  \n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner){\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n          squares = {this.state.squares}\n        boardSize = {this.state.boardSize}\n          onClick={(i) => this.handleClick( i )}\n           />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const consecutive = 3;\n    var boardSize = Math.floor( Math.sqrt( squares.length ) );\n    console.log( boardSize );\n    for( var row = 0; row < boardSize; row++ ) {\n        for( var column = 0; column < boardSize - consecutive + 1; column++ ) {\n            var win = true;\n            let index = getIndex( row, column, boardSize );\n            if( !squares[ index ] ) continue;\n            for( var offset = 0; offset < consecutive; offset++ ) {\n                let new_index = getIndex( row, column + offset, boardSize );\n                if( squares[ index ] !== squares[ new_index ] ) {\n                    win = false;\n                    break;\n                }\n            }\n            if( win ) return squares[ index ];\n        }\n    }\n    for( var column = 0; column < boardSize; column++ ) {\n        for( var row = 0; row < boardSize - consecutive + 1; row++ ) {\n            var win = true;\n            let index = getIndex( row, column, boardSize );\n            if( !squares[ index ] ) continue;\n            for( var offset = 0; offset < consecutive; offset++ ) {\n                let new_index = getIndex( row, column + offset, boardSize );\n                if( squares[ index ] !== squares[ new_index ] ) {\n                    win = false;\n                    break;\n                }\n            }\n            if( win ) return squares[ index ];\n        }\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}